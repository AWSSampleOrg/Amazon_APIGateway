AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: API Gateway Sample
Parameters:
  ProjectPrefix:
    Type: String
    Default: ""

  APIGatewayStageName:
    Type: String
    AllowedValues:
      - test
      - prod

  VpcId:
    Type: String
  PrivateSubnetAId:
    Type: String
  PrivateSubnetCId:
    Type: String

Globals:
  Api:
    OpenApiVersion: 3.0.1

Resources:
  #-------------------------------------------------------
  # API Gateway
  #-------------------------------------------------------
  APIGatewayAccount:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn: !Sub ${APIGatewayRole.Arn}

  APIGatewayRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub ${ProjectPrefix}rest_api

  APIGatewayResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref APIGatewayRestApi
      ParentId: !GetAtt APIGatewayRestApi.RootResourceId
      PathPart: "{proxy+}"

  APIGatewayGetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        ConnectionId: !Ref VPCLink
        ConnectionType: VPC_LINK
        Type: HTTP_PROXY
        IntegrationHttpMethod: GET
        IntegrationResponses:
          - StatusCode: 200
        PassthroughBehavior: WHEN_NO_MATCH
        RequestParameters:
          integration.request.path.proxy: method.request.path.proxy
        Uri: !Sub http://${BackendNLB.DNSName}/{proxy}
      MethodResponses:
        - StatusCode: 200
      RequestParameters:
        method.request.path.proxy: true
      ResourceId: !Ref APIGatewayResource
      RestApiId: !Ref APIGatewayRestApi

  APIGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - APIGatewayGetMethod
    Properties:
      RestApiId: !Ref APIGatewayRestApi
      StageName: !Sub ${APIGatewayStageName}
      StageDescription:
        # https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html#context-variable-reference?cmpid=docs_apigateway_console
        AccessLogSetting:
          DestinationArn: !Sub ${APIGatewayAccessLogGroup.Arn}
          Format: '{ "requestId":"$context.requestId", "extendedRequestId":"$context.extendedRequestId", "ip": "$context.identity.sourceIp", "caller":"$context.identity.caller", "user":"$context.identity.user", "requestTime":"$context.requestTime", "httpMethod":"$context.httpMethod", "resourcePath":"$context.resourcePath", "status":"$context.status", "protocol":"$context.protocol", "responseLength":"$context.responseLength" }'
        # CloudWatch Logs
        DataTraceEnabled: true
        LoggingLevel: INFO
        MetricsEnabled: true
        TracingEnabled: true

  VPCLink:
    Type: AWS::ApiGateway::VpcLink
    Properties:
      Name: !Sub ${ProjectPrefix}VPCLink
      TargetArns:
        - !Ref BackendNLB

  #-------------------------------------------------------
  # CloudWatch LogGroup
  #-------------------------------------------------------
  APIGatewayExecutionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub API-Gateway-Execution-Logs_${APIGatewayRestApi}/${APIGatewayStageName}

  APIGatewayAccessLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub API-Gateway-Access-Logs_${APIGatewayRestApi}/${APIGatewayStageName}

  # ------------------------------------------------------------#
  # IAM
  # ------------------------------------------------------------#
  APIGatewayRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
      Path: /
      RoleName: !Sub ${ProjectPrefix}APIGatewayRole

  # ------------------------------------------------------------#
  # NLB
  # ------------------------------------------------------------#
  SecurityGroupForBackendNLB:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${ProjectPrefix}SecurityGroupForBackendNLB
      GroupDescription: This is for SecurityGroupForBackendNLB
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - CidrIp: "0.0.0.0/0"
          Description: This is for BackendNLB
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
      Tags:
        - Key: Name
          Value: !Sub ${ProjectPrefix}SecurityGroupForBackendNLB
  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref TargetGroupForBackendNLB
          Type: forward
      LoadBalancerArn: !Ref BackendNLB
      Port: 80
      Protocol: TCP
  BackendNLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: ipv4
      Name: !Sub ${ProjectPrefix}LoadBalancer
      Scheme: internal
      SecurityGroups:
        - !Ref SecurityGroupForBackendNLB
      Subnets:
        - !Ref PrivateSubnetAId
        - !Ref PrivateSubnetCId
      Type: network
  TargetGroupForBackendNLB:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 60
      HealthCheckPort: traffic-port
      HealthCheckProtocol: TCP
      HealthCheckTimeoutSeconds: 30
      HealthyThresholdCount: 5
      Name: !Sub ${ProjectPrefix}TargetGroupForBackendNLB
      Port: 80
      Protocol: TCP
      TargetType: ip
      UnhealthyThresholdCount: 3
      VpcId: !Ref VpcId
