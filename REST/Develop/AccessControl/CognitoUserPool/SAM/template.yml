AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: API Gateway Sample
Parameters:
  # APIGateway
  APIGatewayStageName:
    Type: String
    AllowedValues:
      - test
      - prod

Globals:
  Api:
    OpenApiVersion: 3.0.1

Resources:
  #-------------------------------------------------------
  # API Gateway
  #-------------------------------------------------------
  APIGatewayAccount:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn: !Sub ${APIGatewayRole.Arn}

  APIGatewayRestApi:
    Type: AWS::Serverless::Api
    Properties:
      # access logging
      # https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html#context-variable-reference?cmpid=docs_apigateway_console
      AccessLogSetting:
        DestinationArn: !Sub ${APIGatewayAccessLogGroup.Arn}
        Format: '{ "requestId":"$context.requestId", "extendedRequestId":"$context.extendedRequestId", "ip": "$context.identity.sourceIp", "caller":"$context.identity.caller", "user":"$context.identity.user", "requestTime":"$context.requestTime", "httpMethod":"$context.httpMethod", "resourcePath":"$context.resourcePath", "status":"$context.status", "protocol":"$context.protocol", "responseLength":"$context.responseLength" }'
      Name: api_gateway
      DefinitionBody:
        Fn::Transform:
          Name: AWS::Include
          Parameters:
            Location: swagger.yml
      MethodSettings:
        # execution logging
        # https://docs.aws.amazon.com/apigateway/latest/developerguide/set-up-logging.html
        - DataTraceEnabled: true
          LoggingLevel: INFO
          ResourcePath: "/*"
          HttpMethod: "*"
          MetricsEnabled: true
      TracingEnabled: true
      StageName: !Sub ${APIGatewayStageName}

  APIGatewayLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref TargetLambdaFunction
      Principal: apigateway.amazonaws.com

  #-------------------------------------------------------
  # CloudWatch LogGroup
  #-------------------------------------------------------
  APIGatewayExecutionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub API-Gateway-Execution-Logs_${APIGatewayRestApi}/${APIGatewayStageName}

  APIGatewayAccessLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub API-Gateway-Access-Logs_${APIGatewayRestApi}/${APIGatewayStageName}

  TargetLambdaFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${TargetLambdaFunction}

  #-------------------------------------------------------
  # Cognito
  #-------------------------------------------------------
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: UserPool
      AccountRecoverySetting:
        RecoveryMechanisms:
          - Name: verified_email
            Priority: 1
      AliasAttributes:
        - email
      AutoVerifiedAttributes:
        - email
        - phone_number
      EnabledMfas:
        - SMS_MFA
        - SOFTWARE_TOKEN_MFA
      MfaConfiguration: OPTIONAL
      Schema:
        - AttributeDataType: String
          Name: email
          Required: True
      SmsConfiguration:
        ExternalId: String
        SnsCallerArn: !Sub ${SnsRole.Arn}

  #App clients
  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      AccessTokenValidity: 60
      ClientName: UserPool-client
      GenerateSecret: false #Do not create Client Secret
      ExplicitAuthFlows:
        - ALLOW_CUSTOM_AUTH
        - ALLOW_USER_SRP_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      IdTokenValidity: 60
      PreventUserExistenceErrors: ENABLED
      RefreshTokenValidity: 43200
      TokenValidityUnits:
        AccessToken: minutes
        IdToken: minutes
        RefreshToken: minutes
      UserPoolId: !Ref UserPool

  #-------------------------------------------------------
  # Lambda
  #-------------------------------------------------------
  TargetLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: Lambda/lambda_handler
      FunctionName: lambda_handler
      Handler: lambda_handler.lambda_handler
      MemorySize: 128
      Role: !Sub ${LambdaRole.Arn}
      Runtime: python3.12
      Timeout: 900
      Tracing: Active
      Environment:
        Variables:
          LOG_LEVEL: DEBUG

  # ------------------------------------------------------------#
  # IAM
  # ------------------------------------------------------------#
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSLambda_FullAccess
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Path: /
      RoleName: LambdaRole

  SnsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - cognito-idp.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSNSFullAccess
      Path: /
      RoleName: SnsRole

  APIGatewayRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
      Path: /
      RoleName: APIGatewayRole

Outputs:
  APIGatewayRestApiId:
    Description: APIGatewayRestApiId
    Value: !Ref APIGatewayRestApi
    Export:
      Name: APIGatewayRestApiId
